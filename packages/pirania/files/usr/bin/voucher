#!/usr/bin/lua

local vouchera = require('voucher.vouchera')
local utils = require('voucher.utils')
local uci = require('uci')
local json = require 'luci.jsonc'

local uci_cursor = uci.cursor()
local arguments
local action
local context

captive_portal = {}

vouchera.init()

-- Show or change portal url
captive_portal.url = function(argument)
    if argument == 'show' then
        return uci_cursor:get("pirania", "base_config", "portal_url")
    else
        uci_cursor:set("pirania", "base_config", "portal_url", argument)
        uci_cursor:commit("pirania")
        return(argument)
    end
end

captive_portal.activate_voucher = function(mac, code)
    local mac = mac or ''
    local code = code or ''
    local res = vouchera.activate(code, mac)
    if res then
        return 'Voucher activated!'
    else
        return "Invalid voucher code '" .. code .. "' or invalid MAC '" .. mac .. "'"
    end
end

--[[
--Checks if the mac of the given context is allowed to browse.
--]]
captive_portal.is_mac_authorized = function(mac)    
    if vouchera.is_mac_authorized(mac or '') then
        print('true')
        sys.exit(0)
    else
        print('false')
        sys.exit(1)
    end
end

captive_portal.show_active_vouchers = function()
    for _, voucher in pairs(vouchera.vouchers) do
        if vouchera.is_active(voucher) then 
            print(voucher.tostring())
        end
    end
end

-- List all vouchers
captive_portal.list_vouchers = function()
    for _, voucher in pairs(vouchera.vouchers) do
        print(voucher.tostring())
    end
end

-- Renew voucher
--captive_portal.renew_voucher = function(context)
--    local db = dba.load(config.db)
--    local voucherSecret = context[1]
--    local renewDate = context[2]
--    json.stringify(logic.update_voucher_date(voucherSecret, renewDate))
--    dba.save(config.db, db)
--end

captive_portal.invalidate_voucher = function(name)
    
end

captive_portal.add_voucher = function(name, code, expiration_date)
    local v = {name=name, code=code, expiration_date=tonumber(expiration_date)}
    res, msg = vouchera.add(v)
    if res ~= nil then
        print('ok')
        os.exit(0)
    else
        print(msg)
        os.exit(1)
    end
end

captive_portal.show_authorized_macs = function()
    for _, voucher in pairs(vouchera.vouchers) do
        if vouchera.is_active(voucher) then 
            print(voucher.mac)
        end
    end
end

-- if is main
if debug.getinfo(2).name == nil then
    local arguments = { ... }
    local action = table.remove(arguments, 1)
    local context = arguments
    print(captive_portal[action](unpack(context)))
end

return captive_portal
